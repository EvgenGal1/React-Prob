/* eslint-disable default-case */
import React from "react";
import { useDebugValue, useState, useEffect } from "react";
import "./CommonTrifles.scss";

// 1
// import Backdrop from "@mui/material/Backdrop";

// hooks –¥–ª—è KeyDown/KeyUp
// –æ–¥–Ω –∫–ª–≤—à.
import { useKeyPress } from "../../../hooks/useKeyPress";
// –º–Ω. –∫–ª–≤—à.
import {
  useMultiKeyPress,
  areKeysPressed,
  MultiKeyPress,
  Label,
} from "../../../hooks/useMultiKeyPress.jsx";
// –ø–æ—Å–ª–µ–¥. –∫–ª–≤—à.
import { useAllKeysPress } from "../../../hooks/useAllKeysPress";
import { Key, Plus, /* Emoji, */ Letter } from "./utilities";

// –ø–æ–¥–∫–ª. UI –±–ª–æ–∫–æ–≤
import ArrowAccordion from "../../../js/includes/ArrowAccordion.js";
// ^ –º–Ω–≥. –∫–ª–≤—à. –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª-–≤–æ –Ω–∞–∂–∞—Ç—ã—Ö –∫–ª–∞–≤–∏—à - https://gaming.stackexchange.com/questions/6669/how-do-i-remove-the-limit-on-pc-keyboard-button-presses
// –æ–±—â. —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ - https://gist.github.com/gragland/b61b8f46114edbcf2a9e4bd5eb9f47f5

// —Ö—É–∫ useKeyPress + –æ—Ç–ª–∞–¥–∫–∞ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–ª–≤—à., –æ—Ç—Å–ª–∂., –≤—ã–≤–æ–¥)--------------------------------------------------------------------
// –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –æ–ø—Ä–µ–¥. –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–ª–≤—à. - –≤—ã–≤–æ–¥ + —à—Ä–∏—Ñ—Ç –∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—é. –µ\–∏ –Ω–∞–¥–æ —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ –æ—Ç—Ä–∞–∂–∞–ª—Å—è/–º–∏–≥–∞–ª, —Ç–æ –∫–æ–º–∏—Ç/—Ä–∞–∑–∫–æ–º–∏—Ç useKeyPress.useEffect.keyup –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∏–≥–∞–µ—Ç.
// !!! –ø–æ YT –≤–∏–¥–µ–æ RED Group –∏–ª–∏ https://usehooks.com/useKeyPress/
// * –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ hooks/useKeyPress
function OneKeysPress() {
  const isJapanPressed = useKeyPress("j");
  const isChinaPressed = useKeyPress("c");
  const isSouthKoreaPressed = useKeyPress("k");
  // const isAustraliaPressed = useKeyPress("a");

  const keysPressed = useMultiKeyPress();

  return (
    <div className="OneKeysPress---">
      <div
        className="OneKeysPress__descript--"
        // ref={this.RefActivCl}
        // onClick={() => {
        //   this.handleClickRef();
        //   this.toggleArrowAccord(this.openArrowAccord);
        // }}
      >
        <h1>—Ö—É–∫ keysPressed –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∂–∞—Ç–∏—è –æ–¥–Ω–æ–π –∫–ª–∞–≤–∏—à</h1>
        <div
        // className="temporary"
        // style={{ display: "none" }}
        // ref={this.RefOpenDop}
        //  style={{ fontWeight: "bold", color: "red" }}
        ></div>
        <div>
          –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –ù–ê–∂–∞—Ç–∏–∏ –æ–ø—Ä–µ–¥. –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –∫–ª–≤—à. - –≤—ã–≤–æ–¥ + —à—Ä–∏—Ñ—Ç –∫
          –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—é.
        </div>
        <div>
          –ï\–∏ –Ω–∞–¥–æ —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ –æ—Ç—Ä–∞–∂–∞–ª—Å—è/–º–∏–≥–∞–ª, —Ç–æ –∫–æ–º–∏—Ç/—Ä–∞–∑–∫–æ–º–∏—Ç
          useKeyPress.useEffect.keyup –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∏–≥–∞–µ—Ç.
        </div>
        <p>–ù–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à–∏ 'J', 'C', 'K'</p>
        {/* <ArrowAccordion
          // toggleArrowAccord={this.toggleArrowAccord}
          openArrowAccord={this.state.openArrowAccord}
        /> */}
      </div>
      <div
        // ref={this.RefOpenCont}
        className="OneKeysPress__content--"
      >
        {/* –ø—Ä–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ª–æ–≤–∏—è. –ø—Ä–∏ –Ω–∞–∂–∞—Ç–æ–π –∫–ª–≤—à –≤—ã–π–¥–µ—Ç –ò div */}
        {isJapanPressed && <div>üáØüáµ</div>}
        {isChinaPressed && <div>üá®üá≥</div>}
        {isSouthKoreaPressed && <div>üá∞üá∑</div>}
        {/* {isAustraliaPressed && <div>üá¶üá∫</div>} */}
        <MultiKeyPress
          keys={["q", "w", "e"]}
          keysPressed={keysPressed}
          emoji="WIN"
        />
      </div>
    </div>
  );
}

// fn()useMultiKeyPress (–Ω–∞–∂–∞—Ç–∏–µ –Ω–µ—Å–∫ –∫–ª–∞–≤–∏—à)--------------------------------------------------------------------
// —Ö—É–∫ –ø—Ä–∏ –∑–∞–∂–∞—Ç–∏–∏ –Ω–µ—Å–∫-–∏—Ö –æ–ø—Ä–µ–¥. –∫–ª–≤—à. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ò –Ω–∞–∂–∞—Ç–∏–∏ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ–ø—Ä–µ–¥. –∫–ª–≤—à. - –≤—ã–≤–æ–¥ + —à—Ä–∏—Ñ—Ç –∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—é. –ï\–∏ –Ω–∞–¥–æ —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ –æ—Ç—Ä–∞–∂–∞–ª—Å—è/–º–∏–≥–∞–ª, —Ç–æ –∫–æ–º–∏—Ç/—Ä–∞–∑–∫–æ–º–∏—Ç useMultiKeyPress.useEffect.keyup –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∏–≥–∞–µ—Ç.
// !!! –Ω–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ - https://codesandbox.io/s/y3qzyr3lrz?file=/src/use-multi-key-press.js
// * –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –≤ hooks useMultiKeyPress
function MultiKeysPress() {
  const happyPress = useKeyPress("h");
  // const sadPress = useKeyPress("v");
  const robotPress = useKeyPress("r");
  const foxPress = useKeyPress("f");

  const keysPressed = useMultiKeyPress();
  // const hsrfPressed = AreKeysPressed(["q", "w", "e"], keysPressed);
  const hsrfPressed = areKeysPressed(["q", "w", "e"], keysPressed);

  // const combinePress = useAllKeysPress({
  //   // userKeys: ["a", "b", "c"],
  //   // userKeys: ["d", "o", "p", "m", "e", "n", "u"],
  //   userKeys: ["d", "o", "p", "m", "n"],
  //   order: true,
  // });

  return (
    <div className="MultiKeysPress--">
      <div className="MultiKeysPress__descript--">
        <h3>—Ö—É–∫ –∏ fn() MultiKeyPress –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∂–∞—Ç–∏—è –º–Ω–æ–≥–∏—Ö –∫–ª–∞–≤–∏—à</h3>
        <div>
          –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–µ—Ç –ó–ê–∂–∞—Ç–∏–∏ –Ω–µ—Å–∫-–∏—Ö –æ–ø—Ä–µ–¥. –∫–ª–≤—à. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –ò –ù–ê–∂–∞—Ç–∏–∏
          –æ–¥–∏–Ω–æ—á–Ω—ã—Ö –æ–ø—Ä–µ–¥. –∫–ª–≤—à. - –≤—ã–≤–æ–¥ + —à—Ä–∏—Ñ—Ç –∫ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—é
        </div>
        <div>
          –ï\–∏ –Ω–∞–¥–æ —á—Ç–æ–±—ã –≤—ã–≤–æ–¥ –æ—Ç—Ä–∞–∂–∞–ª—Å—è/–º–∏–≥–∞–ª, —Ç–æ –∫–æ–º–∏—Ç/—Ä–∞–∑–∫–æ–º–∏—Ç
          useMultiKeyPress.useEffect.keyup –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∏–≥–∞–µ—Ç.
        </div>
      </div>
      <div className="MultiKeysPress__content--">
        <div className="countryflags__twoexp---">
          <div className="countryflags__twoexp_description---">
            {/* –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º */}
            <Label value="–ù–∞–∂–º–∏—Ç–µ –æ–¥–∏–Ω–æ—á–Ω—ã–µ –∫–ª–∞–≤–∏—à–∏: " />
            <Label value="h" isBold={happyPress} />
            <Label value="r" isBold={robotPress} />
            <Label value="f" isBold={foxPress} />
            <br></br>
            <Label
              value="–ù–∞–∂–º–∏—Ç–µ –∫–ª–∞–≤–∏—à–∏ –≤–º–µ—Å—Ç–µ, –ø–æ—Ç–æ–º –æ–¥–∏–Ω–æ—á–Ω—ã–µ: q + w + e"
              isBold={hsrfPressed}
            />
          </div>
          –í–º–µ—Å—Ç–µ q w e, –æ—Ç–¥–µ–ª—å–Ω–æ h r f
          <div className="countryflags__twoexp_content---">
            {happyPress && "üòä"}
            {/* {sadPress && "üò¢"} */}
            {robotPress && "ü§ñ"}
            {foxPress && "ü¶ä"}
            <br />
            {/* // ~~~ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ - –≤—ã–≤–æ–¥–∏—Ç WIN –µ/–∏ –∑–∞–∂–∞—Ç—ã –≤—Å–µ keys + –≤ keysPressed(—á/–∑ useMultiKeyPress) –ø–æ–ª—É—á. (—Ö–∑ —á—Ç–æ?true?) + –ø–µ—Ä–µ–¥–∞–ª–∏ emoji */}
            <MultiKeyPress
              keys={["q", "w", "e"]}
              keysPressed={keysPressed}
              emoji="WIN"
            />
            {/* <useAllKeysPress
              // userKeys: ["a", "b", "c"],
              // userKeys: ["d", "o", "p", "m", "e", "n", "u"],
              userKeys={["d", "o", "p", "m", "n"]}
              order={true}
            />             */}
            {/* <div>{combinePress && <p>–ù–æ—Ä–º</p>}</div> */}
          </div>
        </div>
      </div>
      <div className="countryflags__frame--">CountryFlags</div>
    </div>
  );
  // }
}

// –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞–≤–∏—à ----------------------------------------------------------------------------------
// !!! https://codesandbox.io/s/multiple-keys-in-order-vpovi?file=/src/App.js
function AllKeysPress() {
  // –ø–µ—Ä–µ–º –±—É–∫ –ø–æ—Å–ª–µ —Ö—É–∫–∞
  // const akeyPress = useAllKeysPress({ userKeys: "a" });
  // const bkeyPress = useAllKeysPress({ userKeys: "b" });
  // const ckeyPress = useAllKeysPress({ userKeys: "c" });
  const dkeyPress = useAllKeysPress({ userKeys: "d" });
  const okeyPress = useAllKeysPress({ userKeys: "o" });
  const pkeyPress = useAllKeysPress({ userKeys: "p" });
  const mkeyPress = useAllKeysPress({ userKeys: "m" });
  // const ekeyPress = useAllKeysPress({ userKeys: "e" });
  const nkeyPress = useAllKeysPress({ userKeys: "n" });
  // const ukeyPress = useAllKeysPress({ userKeys: "u" });

  // –º–∞—Å—Å–∏–≤ –±—É–∫–≤ –ø–æ—Å–ª–µ —Ö—É–∫–∞
  const combinePress = useAllKeysPress({
    // userKeys: ["a", "b", "c"],
    // userKeys: ["d", "o", "p", "m", "e", "n", "u"],
    userKeys: ["d", "o", "p", "m", "n"],
    order: true,
  });

  // –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –º–∞—Å—Å–∏–≤ –æ–±—ä.
  const inputs = [
    // { input: akeyPress, key: "a" },
    // { input: bkeyPress, key: "b" },
    // { input: ckeyPress, key: "c" },
    { input: dkeyPress, key: "d" },
    { input: okeyPress, key: "o" },
    { input: pkeyPress, key: "p" },
    { input: mkeyPress, key: "m" },
    // { input: ekeyPress, key: "e" },
    { input: nkeyPress, key: "n" },
    // { input: ukeyPress, key: "u" },
  ];

  // –°–¢–ê–¢–£–°. `–ª—é–±–∞—è –Ω–∞–∂–∞—Ç–∞—è –∫–ª–∞–≤–∏—à–∞` // ~~~ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ - –ø—Ä–æ–≤. –º–∞—Å—Å–∏–≤ –æ–±—ä. –∏ –≤–æ–∑–≤—Ä–∞—â. true –µ—Å–ª–∏ –µ—Å—Ç—å input?
  const anyKeyPressed = inputs.some((item) => item.input === true);
  // some - `–Ω–µ–º–Ω–æ–≥–æ` –æ–ø—Ä–µ–¥., –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏ fn callback - true, –¥–ª—è —ç–ª. –º–∞—Å—Å–∏–≤–∞.

  // –∑–¥–µ—Å—å false
  // console.log("anyKeyPressed : " + anyKeyPressed);

  // –¥–æ–ø –≤–∏–∑—É–∞–ª
  // `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É`. // –¥–æ–ø. –≤–∏–∑—É–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –≤—ã–≤–æ–¥–∞–º–∏ –∑–∞–ø–æ–ª–Ω. –ë—É–∫–≤ –∏ –ü–ª—é—Å–æ–≤. –º–æ–∂–Ω–æ –±–µ–∑ –ø–æ–¥—Å–∫–∞–∑–æ–∫
  function UseAllKeypad({
    inputs, // –≤—Ö–æ–¥.–¥–∞–Ω–Ω. –º–∞—Å—Å.–æ–±—ä.
    type = "single", // –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è multi
  }) {
    // ~~~ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ - singleKeyList –Ω–µ –Ω—É–∂–µ–Ω ? –ö–ª–∞–≤–∏—à–∏ –µ—Å—Ç—å –≤ Fragment
    // –ö–ª–∞–≤–∏—à–∏. `–µ–¥–∏–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π` - –ø–µ—Ä–µ–±–æ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ props, –≤–æ–∑–≤—Ä comp.svg –ö–ª–∞–≤–∏—à–∏(—Ü–≤–µ—Ç. –ø–æ —É—Å–ª–æ–≤.)
    const singleKeyList = inputs.map((item, index) => (
      <Key name={item.key} item={item.input} key={index} />
    ));

    // –ü—Å—é—Å –≤ –ø–µ—Ä–µ–º. `–ú–Ω.—Ñ—É–Ω–∫-—ã–π —Å–ø–∏—Å–æ–∫` - –ø–µ—Ä–µ–±–æ—Ä, –≤—ã–±–æ—Ä —Å–ª–µ–¥. –ø–ª—é—Å–∞, –≤–æ–∑–≤—Ä. comp.svg –ü–ª—é—Å(—Ü–≤–µ—Ç. –ø–æ —É—Å–ª–æ–≤.)
    const multiKeyList = inputs.map((item, index) => {
      let plusItem = null;
      // –µ/–∏ index –Ω–µ —Ä–∞–≤–µ–Ω –¥–ª–∏–Ω–µ –º–∞—Å—Å–∏–≤–∞ -1
      if (index !== inputs.length - 1) {
        plusItem = <Plus item={item.input} />;
      }

      return (
        <React.Fragment key={index}>
          {/* –ö–ª–∞–≤–∏—à–∏. // ~~~ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ - singleKeyList –Ω–µ –Ω—É–∂–µ–Ω ? */}
          <Key name={item.key} item={item.input} key={index} />
          {/* UseAllKeypad 0 */}
          {plusItem}
          {/* UseAllKeypad 1 */}
        </React.Fragment>
      );
    });

    let selectedList = null;

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ type. –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è multi // ~~~ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ - singleKeyList –Ω–µ –Ω—É–∂–µ–Ω ?
    if (type === "single") {
      selectedList = singleKeyList;
    }

    // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ type. –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è multi
    if (type === "multi") {
      selectedList = multiKeyList;
    }

    return <div className="flex-navigation">{selectedList}</div>;
  }

  // –¥–æ–ø. –≤–∏–∑—É–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å –≤—ã–≤–æ–¥–∞–º–∏ –¥–æ–ø.–±—É–∫–≤, –∞–Ω–∏–º–∞—Ü–∏–µ–π, —Å–º—Å. –º–æ–∂–Ω–æ –ø—Ä–æ—â–µ –ø–æ —É—Å–ª.—Ä–µ–Ω–¥–µ—Ä
  function Screen({
    activate, // —Å—Ç–∞—Ç—É—Å (true ?)
    input, // –≤—Ö–æ–¥.–¥–∞–Ω–Ω. (–º–∞—Å—Å.–æ–±—ä.)
    message = "",
    combine = false,
    type = "single", // –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è jackson
    // children, // ? —Ö–∑ –∑–∞—á–µ–º.2
  }) {
    let selectedList = null;
    let className = "";
    let monitorSatus = "";

    // ? —Ö–∑ –∑–∞—á–µ–º.1 –í—ã–≤–æ–¥ —ç–º–æ–∂–¥–∏?
    // const singleInputItems = input.map(
    //   (item, index) => item.input && <Emoji symbol={item.symbol} key={index} />
    // );

    // –î–æ–ø.–≤—ã–≤–æ–¥ –±—É–∫–≤ —á/–∑ Letter –ø–æ —É—Å–ª–æ–≤–∏—é | –ø—Ä–∏–º–µ—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–ª—é—á–µ–π
    const jacksonInputItems = input.map(
      // true - –µ/–∏ –≤ –ø–µ—Ä–µ–±—Ä–∞–Ω–æ–º item –∏–∑ props input (inputs[input]) –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ (–ø—Ä. akeyPress) —Ç–æ –ø–µ—Ä–µ–¥–∞—á–∞ props –≤ Letter
      (item, index) => item.input && <Letter key={index} text={item.key} />
    );

    // –µ/–∏ props type = single, —Ç–æ .monitorOff(–Ω–∏ –æ–¥–Ω–∞ –∏–∑ –±—É–∫–≤)
    if (type === "single") {
      // selectedList = singleInputItems; // ? —Ö–∑ –∑–∞—á–µ–º.1
      className = "monitorOff";
    }

    // –°—á–∞—Å jackson –Ω–∞—Å—Ç—Ä. –ø–æ —É–º–æ–ª—á. –ï/–∏ props type = jackson(—É–º–æ–ª—á.), —Ç–æ .monitorOff(–Ω–∏ –æ–¥–Ω–∞ –∏–∑ –±—É–∫–≤) –∏ .jacksonFiveSing(–∏–∑–æ 1)
    if (type === "jackson") {
      selectedList = jacksonInputItems;
      className = "monitorOff jacksonFiveSing";
      monitorSatus = "jacksonFiveSing";
    }

    return (
      <div className="flex-container">
        <div className="flex-screen">
          {/* {children} */} {/* // ? —Ö–∑ –∑–∞—á–µ–º.2 */}
          {/* –µ/–∏ –µ—Å—Ç—å props active(true –≤ —ç–ª. –º–∞—Å—Å–∏–≤–∞), –≤—ã–≤–æ–¥ div –ø–æ –∫–ª–∞—Å—Å–∞–º —Å –ë—É–∫–≤–∞–º–∏(1-3 –±—É–∫–≤) –∏–ª–∏ –°–ú–° (0 –±—É–∫–≤) */}
          {activate ? (
            <div
              className={
                // –µ/–∏ props `–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å` –µ—Å—Ç—å(—á/–∑ —Ö—É–∫ Mul...Sequen) —Ç–æ .monitor(–≤—Å–µ –±—É–∫–≤) .jacksonFiveABC(—Å–º–µ–Ω–∞ –Ω–∞ –∏–∑–æ2)
                combine ? "monitor jacksonFiveABC" : `monitor ${monitorSatus}`
              }
            >
              {/* –≤—ã–≤–æ–¥.–¥–æ–ø –±—É–∫–≤ */}
              {selectedList}
            </div>
          ) : (
            <div className={className}>
              <p>{message}</p>
            </div>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className="AllKeysPress">
      <div className="AllKeysPress__descript">
        <h1>–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∞–≤–∏—à</h1>
      </div>
      <div className="AllKeysPress__content">
        {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞. –¥–æ–ø. –≤–∏–∑—É–∞–ª. –≤—ã–¥–µ–ª–µ–Ω –ë—É–∫–≤—ã –∏ –ü–ª—é—Å–æ–≤ */}
        {/* <UseAllKeypad inputs={inputs} type={"multi"} /> */}
        {/* –í–µ—Ä–Ω—ã–π –í—ã–≤–æ–¥. –¥–æ–ø. –≤–∏–∑—É–∞–ª. –≠–∫—Ä–∞–Ω, –¥–æ–±.–Ω–∞–∂–∞—Ç.–±—É–∫–≤—ã, —Å–º—Å */}
        {/* <Screen
          activate={anyKeyPressed}
          input={inputs}
          combine={combinePress}
          type={"jackson"}
          message={"–í—Å–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞ –º–Ω–æ–π !!"}
        ></Screen> */}
        <p>
          –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–ª–∏–Ω–Ω—ã–º –≤–≤–æ–¥–æ–º –ø—Ä–∏ —É–¥–µ—Ä–∂–∞–Ω–∏–∏ –∫–ª–∞–≤–∏—à. –Ω–µ –≤—Å–µ –∫–ª–≤—à. –º–æ–≥—É—Ç
          –Ω–∞–±—Ä–∞—Ç—Å—è. –º–∞–∫—Å –Ω–∞—à—ë–ª 5. –ø–æ –ø—Ä–æ–±–ª–µ–º–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –≤ –∫–æ–¥–µ
        </p>
        <p>–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–æ–¥ - ljgvty. –∫–∞–∫–∏–µ –∫–ª–≤—à –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è</p>
        <p>
          –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤—ã–∑–æ–≤–∞ —Ö—É–∫–∞ useAllKeysPress –≤
          comp.MultiKeysPress, –ª–æ–≥–∏–∫–∞ MultiKeyPress —Å –∫–ª–∞–≤–∏—à–∏–º–∏ qwe - —Å–ª–æ–º–∞–ª–∞—Å—å.
          –¢–µ–ø–µ—Ä—å –ø—Ä–∏ –≤—ã–≤–æ–¥—è—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –Ω–∞–∂–∞—Ç–∏–∏, –±–µ–∑ –¥–æ–ø.–∫–Ω–ø.
        </p>
        <p>
          –°–ª–∏–≤–∞—Ç—å –∏–ª–∏ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ö—É–∫–∏ Key, —á—Ç–æ–± –±—ã–ª –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π,
          —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–≤–æ–¥ —Å –æ—Å—Ç–∞–≤–ª–µ–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º. –ú–æ–∂–Ω–æ –∏ –¥–æ–ø –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏.
          –ù–∞–∑–Ω–∞—á–∏—Ç—å –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω—ã
        </p>
        <p>–≤—ã–≤–µ–¥–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤ –ø–æ —É—Å–ª–æ–≤–∏–º/–æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º</p>
        <p>–≤—Ä–µ–º–µ–Ω–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª addEventListener("keyup" –≤ —Ö—É–∫–µ.</p>
        <p>
          —á/–∑ combinePress –≤—ã–≤–æ–¥–∏—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ —Å–±—Ä–æ—Å
          –ø–æ—Å–ª–µ –ª—é–±—ã—Ö –∫–ª–∞–≤–∏—à
        </p>
        <p>
          —á/–∑ anyKeyPressed (–¥–ª–æ–∂–Ω–æ –±—ã—Ç—å true, –Ω–æ –ø–æ—Å–ª–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ cg - false.
          true –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏) —É—Å–ª.—Ä–µ–Ω–¥. –∏/–∏–ª–∏ –æ–ø–µ—Ä–∞—Ç. –≤—ã–≤–æ–¥–∏—Ç –±–ª–æ–∫. –Ω–æ –ø–æ –ª—é–±–æ–º—É
          –Ω–∞–∂–∞—Ç–∏—é –∫–ª–∞–≤. –∏–∑ dopmn
        </p>
        <p>
          –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å/–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å -
          https://translated.turbopages.org/proxy_u/en-ru.ru.a2f3a68f-6334556c-afe7adea-74722d776562/https/stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript
        </p>
        <br />

        <span>["d", "o", "p", "m", "n"]</span>
        <div>
          {combinePress && (
            <span style={{ marginRight: "5px" }}>–ù–∞ combinePress</span>
          )}
          {combinePress ? <>- –ù–û–†–ú</> : <span>–ù–ï –Ω–æ—Ä–º combinePress</span>}
        </div>
        <div>
          {anyKeyPressed && (
            <span style={{ marginRight: "5px" }}>–ù–∞ anyKeyPressed</span>
          )}
          {anyKeyPressed ? <>- –ù–û–†–ú</> : <span>–ù–ï –Ω–æ—Ä–º anyKeyPressed</span>}
        </div>
      </div>
    </div>
  );
  // }
}

// Prob2();
// PROBKEY ----------------------------------------------------------------------------------
function ProbKeyFnComp() {
  // 1 ----------------------------------------------------------------------------------
  const [backdropOpen, setBackdropOpen] = useState(false);
  useEffect(() => {
    // –ö–ª—é—á–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ¬´—Ñ–æ–Ω–∞—Ä–æ–ø–æ–ø–µ–Ω–∞¬ª, —á—Ç–æ–±—ã –±—ã—Ç—å ¬´–∏—Å—Ç–∏–Ω–Ω–æ–π¬ª
    const keysArr = ["ControlLeft", "ShiftLeft", "AltLeft"];
    const keysMap = {};
    let backdropOpenLocal = false;

    const keydownEvent = "keydown";
    const keyupEvent = "keyup";

    const checkKeys = () => {
      const keysArePressed = keysArr.every(
        (value) => keysMap[value] === keydownEvent
      );
      if (keysArePressed !== backdropOpenLocal) {
        backdropOpenLocal = keysArePressed;
        setBackdropOpen(keysArePressed);
      }
    };

    const handleKeyDown = (event) => {
      const keyCode = event.code;
      if (keysArr.includes(keyCode) && keysMap[keyCode] !== keydownEvent) {
        keysMap[keyCode] = keydownEvent;
      }
      checkKeys();
    };

    const handleKeyUp = (event) => {
      const keyCode = event.code;
      if (keysArr.includes(keyCode) && keysMap[keyCode] !== keyupEvent) {
        keysMap[keyCode] = keyupEvent;
      }
      checkKeys();
    };

    document.addEventListener("keydown", handleKeyDown);
    // document.addEventListener("keyup", handleKeyUp);

    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.removeEventListener("keyup", handleKeyUp);
    };
  }, []);

  // 2 Set ----------------------------------------------------------------------------------
  const [keySet, setKeySet] = useState(false);
  // const constRunOnKeysSet = function runOnKeysSet(func, ...codes) {
  const runOnKeysSet = function runOnKeysSet() {
    let codes = ["KeyQ", "KeyS"];
    let pressed = new Set();

    document.addEventListener("keydown", function (event) {
      pressed.add(event.code);

      for (let code of codes) {
        // –≤—Å–µ –ª–∏ –∫–ª–∞–≤–∏—à–∏ –∏–∑ –Ω–∞–±–æ—Ä–∞ –Ω–∞–∂–∞—Ç—ã?
        if (!pressed.has(code)) {
          return;
        }
      }
      pressed.clear();
      // func();
      setKeySet(true);
    });

    document.addEventListener("keyup", function (event) {
      pressed.delete(event.code);
    });
  };
  // constRunOnKeysSet(() => alert("Q –∏ W –ø–æ Set"), "KeyQ", "KeyR");
  runOnKeysSet();

  // 2 Arrow ---------------------------------------------------------------------------------
  const [keyArrow, setKeyArrow] = useState(false);
  // function runOnKeysArray(func, ...codes) {
  // `–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞ –º–∞—Å—Å–∏–≤–µ –∫–ª–∞–≤–∏—à`
  function runOnKeysArray() {
    let codes = ["KeyQ", "KeyA"];
    var keyDownKeys = new Array();
    document.body.addEventListener("keydown", function (event) {
      var e = event.code;
      if (codes.includes(e) && !keyDownKeys.includes(e)) keyDownKeys.push(e);
      if (equalArrays(keyDownKeys, codes)) {
        // func();
        setKeyArrow(true);
        keyDownKeys = new Array();
      }
    });
    document.body.addEventListener("keyup", function (event) {
      var e = event.code;
      var index = keyDownKeys.indexOf(e);
      if (index > -1) keyDownKeys.splice(index, 1);
    });
  }

  // `—Ä–∞–≤–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã`
  function equalArrays(arr1, arr2) {
    for (const i of arr2) if (!arr1.includes(i)) return false;
    for (const i of arr1) if (!arr2.includes(i)) return false;
    return true;
  }
  // runOnKeysArray(() => alert("Q –∏ W –ø–æ Arrow"), "KeyQ", "KeyW");
  runOnKeysArray();

  // 3 –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å ---------------------------------------------------------------------------
  const [keyCombin, setKeyCombin] = useState(false);
  // const pressKeyCombin = runOnKeys3(["KeyQ", "Period"]);
  function runOnKeys3(func, code1, code2, code3) {
    document.addEventListener("keydown", keyDown);
    document.addEventListener("keyup", keyUp);
    // window.addEventListener("keyup", upHandel);

    let key1,
      key2,
      key3 = null;

    let args = [code1, code2, code3];
    let mass = [];

    function keyDown(event) {
      // if (event.code !== code1 && event.code !== code2 && event.code !== code3) {
      //   key1 = null; key2 = null; key3 = null; }
      if (event.code === code1) {
        key1 = event.code;
        mass.push(event.code === code1);
      }
      if (event.code === code2 && key1) {
        key2 = event.code;
        mass.push(event.code);
      }
      if (event.code === code3 && key1 && key2) {
        key3 = event.code;
        mass.push(event.code);
      }
      if (key1 && key2 && key3 && args.length === mass.length) {
        // func();
        setKeyCombin(true);
        key1 = null;
        key2 = null;
        key3 = null;
        mass = [];
      }
    }

    function keyUp(event) {
      if (event.code !== code1 && event.code !== code2 && event.code !== code3)
        return;
      key1 = null;
      key2 = null;
      key3 = null;
      mass = [];
    }
  }
  runOnKeys3(() => alert("–ü—Ä–∏–≤–µ—Ç!"), "KeyQ", "Period", "Comma"); // (—Å–æ—á–µ—Ç–∞–Ω–∏–µ - Q><)
  // document.onkeydown = function (event) {
  //   console.log(event);
  // };

  // 4 ----------------------------------------------------------------------------------
  let flag = false;
  document.addEventListener("keydown", function clicked(event) {
    if (event.code === "AltLeft") flag = true;
    if (event.code === "KeyN" && flag) {
      flag = false;
      console.log("work 1");
      // document.removeEventListener("keydown", clicked, false);
    }
  });

  // –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å e.shiftKey
  document.addEventListener("keydown", function clicked2(event) {
    // if (event.code === "AltLeft") {
    if (event.altKey) {
      document.addEventListener("keyup", function clicked2(event) {
        // if (event.code === "KeyN") {
        if (event.code === "KeyM") {
          // ~~~ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ - –≤ –∫–æ–Ω—Å–æ–ª–µ –ø–æ 5-10 –≤—ã–∑–æ–≤–æ–≤ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö. —Ö–∑ –æ—Ç—á–µ–≥–æ
          console.log("work 2");
        } else {
          document.removeEventListener("keydown", clicked2, false);
        }
      });
    }
  });
  // 5 ---------------------------------------------------------------------------------
  document.addEventListener("keydown", function Prob2(e) {
    //SHIFT + something
    if (e.shiftKey) {
      switch (e.code) {
        case "KeyS":
          // console.log('Shift + S');
          alert("Shift + S");
          break;
      }
    }

    //CTRL + SHIFT + something
    if (e.ctrlKey && e.shiftKey) {
      switch (e.code) {
        case "KeyS":
          // console.log('CTRL + Shift + S');
          alert("CTRL + Shift + S");
          break;
      }
    }
  });
  //  ----------------------------------------------------------------------------------
  //  ----------------------------------------------------------------------------------
  //  ----------------------------------------------------------------------------------
  return (
    <div
      className="ProbKeyFnComp"
      style={{ visibility: "visible", opacity: "1" }}
    >
      {/* https://translated.turbopages.org/proxy_u/en-ru.ru.a2f3a68f-6334556c-afe7adea-74722d776562/https/stackoverflow.com/questions/5203407/how-to-detect-if-multiple-keys-are-pressed-at-once-using-javascript */}
      <div className="1" style={{ backgroundColor: "rgb(175 127 127)" }}>
        <p>–í—ã–≤–æ–¥ –±–ª–æ–∫ –ø–æ "ControlLeft", "ShiftLeft", "AltLeft"</p>
        <p>
          –≤–∫–ª –Ω–µ –∑–∞–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ø—Ä–∏ –æ—Ç–∫–ª addEventListener("keyup",
          handleKeyUp) –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–ª–≤—à –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç. –Ω–∏–∫–∞–∫–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        </p>
        {backdropOpen && <p>–ì–æ—Ç–æ–≤–æ</p>}
        <div></div>
      </div>
      <div className="2">
        <p>
          –í—ã–≤–æ–¥ –±–ª–æ–∫ –ø–æ Q –∏ S –∏–ª–∏ Q –∏ A. –ù–µ—Ç –ø–æ—Å–ª–µ–¥-—Ç–∏. –ö–æ–¥ –Ω–∞ Set –∏ Arrow.
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Ç–æ–ª—å–∫–æ —É Arrow
        </p>
        <div>{keySet && <p>Set</p>}</div>
        <div>{keyArrow && <p>Arrow</p>}</div>
      </div>
      <div className="3" style={{ backgroundColor: "rgb(175 127 127)" }}>
        <p>
          –í—ã–≤–æ–¥ –±–ª–æ–∫ –ø–æ "Q", "Period", "Comma" (q., | –π—é–±). –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã.
        </p>
        <div>{keyCombin && <p>–π—é–±</p>}</div>
      </div>
      <div className="4">
        <p></p>
      </div>
      <div className="5" style={{ backgroundColor: "rgb(175 127 127)" }}>
        <p></p>
      </div>
    </div>
  );
}

class ProbKeyClComp extends React.Component {
  //constructor(props) {
  //super(props);
  //this.state = {  }
  //}
  render() {
    return (
      <div className="ProbKeyClComp">
        <div className="ProbKeyClComp__descript"></div>
        <div className="ProbKeyClComp__content"></div>
      </div>
    );
  }
}
// PROBKEY ----------------------------------------------------------------------------------

// –ø–æ–∫–ª. –≤ –æ–±—â–∏–π –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∏ –∏–º–ø–æ—Ä—Ç  =======================================================================================
class CommonTrifles extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      openArrowAccord: true,
    };
    this.RefActivCl = React.createRef();
    this.RefOpenDop = React.createRef();
    this.RefOpenCont = React.createRef();
  }
  handleClickRef() {
    this.RefActivCl.current.classList.toggle("_active");
    this.RefOpenDop.current.classList.toggle("openDop");
    this.RefOpenCont.current.classList.toggle("openCont");
    // this.setState((prevState) => ({
    //   openArrowAccord: !prevState.openArrowAccord,
    // }));
  }
  toggleArrowAccord = () => {
    this.setState((prevState) => ({
      openArrowAccord: !prevState.openArrowAccord,
    }));
  };

  render() {
    return (
      <div className="CommonTrifles accordion">
        <div
          className="CommonTrifles__descript"
          ref={this.RefActivCl}
          onClick={() => {
            this.handleClickRef();
            this.toggleArrowAccord(this.openArrowAccord);
          }}
        >
          <h3>—Ö—É–∫ useKeyPress (+ fn()useMultiKeyPress) + –æ—Ç–ª–∞–¥–∫–∞</h3>
          <div
            className="temporary"
            style={{ display: "none" }}
            ref={this.RefOpenDop}
          >
            <code style={{ color: "red" }}>!!!</code> –î–û–†–ê–ë–û–¢–ê–¢–¨{" "}
            <code style={{ color: "red" }}>!!!</code>
            –ù–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –ø–æ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—é –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏—à–∏. –†–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –¥–ª—è
            —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫, —ç–∫—Ä–∞–Ω–æ–≤, —Å–≤–µ—Ç.—Ç–µ–º, –¥–æ—Å—Ç—É–ø–æ–≤, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä.
            <p>–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–±–∏–Ω. –Ω–∞–∂. –Ω–∞ –∫–ª–≤—à.:</p>
            <p>
              –ø—Ä–∏ EN —Ä–∞—Å–∫–ª–¥. - ",jkmit", + –¥–æ–±. —Ü–≤.—Å—Ö–µ–º–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞—Å–∫–ª–∞–¥–æ–∫,
              —ç–∫—Ä–∞–Ω–æ–≤, —Å–≤–µ—Ç.—Ç–µ–º, –¥–æ—Å—Ç—É–ø–æ–≤, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä.{" "}
            </p>
            <p>–¥–æ—Å—Ç—É–ø –≤ –∞–ª—å–±–æ–º –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ –∏–º–µ–Ω–∏ –∞–ª—å–±–æ–º–∞ –≤–æ –≤–∫–ª–∞–¥–∫–µ –∞–ª—å–±–æ–º–æ–≤</p>
            <p>
              –∑–∞–ø–∏—Å—å –≤ localStorage –ø—Ä–∏ –Ω–∞–±–æ—Ä–µ "localStorage+" –∏ —Å–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏ –≤
              CamelCase(–≤–µ—Ä–±–ª—é–∂—å–µ–º —Å—Ç–∏–ª–µ)
            </p>
          </div>
          <ArrowAccordion
            // toggleArrowAccord={this.toggleArrowAccord}
            openArrowAccord={this.state.openArrowAccord}
          />
        </div>
        <div
          ref={this.RefOpenCont}
          className="CommonTrifles__content"
          // –≤—Ä–µ–º–µ–Ω–Ω–æ –∫–ª–∞—Å—Å—ã
          style={{ visibility: "visible", opacity: "1", height: "auto" }}
        >
          <div style={{ background: "red", color: "block" }}>
            –¢–∞–∫ –∂–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å:
            <p>https://realadmin.ru/coding/keyboard-js.html - –ø—Ä–æ—Å—Ç–æ</p>
            <p>https://habr.com/ru/post/244041/ - –ø—Ä–æ—Å—Ç–æ</p>
            <p>
              https://codesandbox.io/s/multiple-keys-in-order-vpovi?file=/src/hooks/useAllKeysPress.js
              - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –ø–æ –ø–æ—Ä—è–¥–∫—É(–Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–ø–∏—Å–∞–Ω–Ω–æ–≥–æ)
            </p>
            <p>
              https://codesandbox.io/s/multiple-keys-jhfdn - –ù–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π
            </p>
            <p>
              https://gist.github.com/gragland/b61b8f46114edbcf2a9e4bd5eb9f47f5
              - —Å–ª–µ–¥–∏—Ç—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ö
            </p>
          </div>
          <OneKeysPress />
          <MultiKeysPress />
          <AllKeysPress />
          <ProbKeyFnComp />
          <ProbKeyClComp />
          {/* <UseAllKeypad inputs={inputs} type={"multi"}/> */}
        </div>
        <div className="CommonTrifles__frame">CommonTrifles.js</div>
      </div>
    );
  }
}

export default CommonTrifles;
