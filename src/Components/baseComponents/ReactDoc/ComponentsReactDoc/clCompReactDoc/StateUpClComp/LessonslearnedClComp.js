import React from "react";
class LessonslearnedClComp extends React.Component {
  constructor(props) {
    super(props);
    //this.state = {  }
  }
  render() {
    return (
      <div className="LessonslearnedClComp">
        <div className="LessonslearnedClComp__descript">
          <h3>Уроки выучены</h3>
          <p>
            Должен быть единый «источник правды» для любых данных, которые
            изменяются в приложении React. Обычно состояние сначала добавляется
            к компоненту, которому оно нужно для рендеринга. Затем, если другие
            компоненты также нуждаются в этом, вы можете поднять его до их
            ближайшего общего предка. Вместо того, чтобы пытаться
            синхронизировать состояние между различными компонентами, вы должны
            полагаться на поток данных сверху вниз .
          </p>
          <p>
            Поднятие состояния требует написания большего количества
            «шаблонного» кода, чем подходы с двусторонней привязкой, но в
            качестве преимущества требуется меньше усилий для поиска и изоляции
            ошибок. Поскольку любое состояние «живет» в каком-то компоненте, и
            только этот компонент может его изменить, площадь поверхности для
            ошибок значительно сокращается. Кроме того, вы можете реализовать
            любую пользовательскую логику для отклонения или преобразования
            пользовательского ввода.
          </p>
          <p>
            Если что-то может быть получено либо из свойств, либо из состояния,
            оно, вероятно, не должно быть в состоянии. Например, вместо
            сохранения обоих <code>celsiusValue</code> и{" "}
            <code>fahrenheitValue</code>, мы сохраняем только последнее
            отредактированное <code>temperature</code> и его <code>scale</code>.
            Значение других входных данных всегда можно вычислить из них в
            методе <code>render()</code>. Это позволяет нам очищать или
            применять округление к другому полю без потери точности
            пользовательского ввода.
          </p>
          <p>
            Когда вы видите что-то не так в пользовательском интерфейсе, вы
            можете использовать инструменты разработчика React для проверки
            свойств и перемещения вверх по дереву, пока не найдете компонент,
            отвечающий за обновление состояния. Это позволяет вам отследить
            ошибки до их источника:
          </p>
        </div>
        <div className="LessonslearnedClComp__content"></div>
      </div>
    );
  }
}
export default LessonslearnedClComp;
